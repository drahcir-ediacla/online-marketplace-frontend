{"version":3,"file":"static/js/5316.0a49e2e5.chunk.js","mappings":"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","sources":["components/ResetPasswordForm/ResetByPhoneForm.jsx","pages/Auth/ResetPassword/ResetByPhone.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport axios from '../../apicalls/axios'\r\nimport { Link } from 'react-router-dom'\r\nimport './style.scss'\r\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport SuccessResetPassword from '../../components/Modal/SuccessResetPassword'\r\nimport LoginBtn from '../Button/LoginBtn'\r\nimport LogoGray from '../../assets/images/Yogeek-logo.png'\r\nimport BtnClear from '../../components/Button/BtnClear'\r\nimport { ReactComponent as FBIcon } from '../../assets/images/facebook-icon.svg'\r\nimport { ReactComponent as GoogleIcon } from '../../assets/images/google-icon.svg'\r\nimport { ReactComponent as SendOtpSpinner } from '../../assets/images/loading-spinner.svg'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Setloader } from '../../redux/reducer/loadersSlice';\r\nimport AlertMessage from '../AlertMessage';\r\n\r\nconst PHONE_REGEX = /^\\d{10}$/;\r\nconst PWD_REGEX = /^.{8,24}$/;\r\n\r\nconst ResetByPhoneForm = () => {\r\n\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const errRef = useRef();\r\n\r\n  const [phone, setPhone] = useState('');\r\n  const [validPhone, setValidPhone] = useState(false)\r\n  const [phoneFocus, setPhoneFocus] = useState(false)\r\n\r\n  const [otp, setOtp] = useState('')\r\n  const [validOtp, setValidOtp] = useState(false);\r\n\r\n  const [pwd, setPwd] = useState('');\r\n  const [validPwd, setValidPwd] = useState(false);\r\n  const [pwdFocus, setPwdFocus] = useState(false);\r\n\r\n  const [matchPwd, setMatchPwd] = useState('');\r\n  const [validMatch, setValidMatch] = useState(false);\r\n  const [matchFocus, setMatchFocus] = useState(false);\r\n\r\n  const [errMsg, setErrMsg] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const [otpTimer, setOtpTimer] = useState(0);\r\n  const [otpSpinner, setOtpSpinner] = useState(false);\r\n\r\n  const [resendOTP, setResendOTP] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    const result = PHONE_REGEX.test(phone)\r\n    setValidPhone(result);\r\n  }, [phone])\r\n\r\n  useEffect(() => {\r\n    const result = PWD_REGEX.test(pwd);\r\n    console.log(result);\r\n    console.log(pwd);\r\n    setValidPwd(result);\r\n    const match = pwd === matchPwd;\r\n    setValidMatch(match);\r\n  }, [pwd, matchPwd])\r\n\r\n  useEffect(() => {\r\n    setErrMsg('');\r\n  }, [pwd, matchPwd])\r\n\r\n  useEffect(() => {\r\n    setValidOtp(otp.length > 0)\r\n  }, [otp])\r\n\r\n  useEffect(() => {\r\n    if (otpTimer > 0) {\r\n      const timer = setTimeout(() => {\r\n        setOtpTimer(otpTimer - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [otpTimer]);\r\n\r\n\r\n  const [formData, setFormData] = useState({\r\n    phone: '',\r\n    password: '',\r\n    otp: '',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n\r\n  const sendOTPCode = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setShowAlert(false);\r\n      setOtpSpinner(true)\r\n      const response = await axios.put('/api/reset-password-otp-phone', formData)\r\n\r\n      if (response.status === 201) {\r\n        setOtpSpinner(false)\r\n        setResendOTP(true)\r\n        setOtpTimer(120); // Start the OTP expiration timer\r\n      }\r\n\r\n    } catch (err) {\r\n      if (err.response.status === 404) {\r\n        setErrMsg('Phone not found.')\r\n        setSuccess(false);\r\n        setOtpSpinner(false)\r\n        setShowAlert(true);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const resetPassword = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // if button enabled with JS hack\r\n    const isPhoneValid = PHONE_REGEX.test(phone);\r\n    const isPasswordValid = PWD_REGEX.test(pwd);\r\n    if (!isPhoneValid || !isPasswordValid) {\r\n      setErrMsg(\"Invalid Entry\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      dispatch(Setloader(true))\r\n      const response = await axios.put('/api/reset-password-phone', formData);\r\n\r\n      if (response.status === 201) {\r\n        dispatch(Setloader(false))\r\n        // User registration was successful\r\n        setSuccess(true);\r\n        // Clear state and controlled inputs\r\n        // Need value attrib on inputs for this\r\n        setPhone('');\r\n        setPwd('');\r\n        setMatchPwd('');\r\n        setOtp('');\r\n      }\r\n    } catch (err) {\r\n      dispatch(Setloader(false))\r\n      let errorMessage = 'An error occurred during updating password';\r\n\r\n      if (err.response) {\r\n        switch (err.response.status) {\r\n          case 404:\r\n            errorMessage = 'Phone not found.';\r\n            break;\r\n          case 401:\r\n            errorMessage = 'Invalid or expired verification code.';\r\n            break;\r\n          default:\r\n            console.error('Error:', err);\r\n        }\r\n      } else {\r\n        console.error('Error:', err);\r\n      }\r\n\r\n      setSuccess(false);\r\n      setErrMsg(errorMessage);\r\n      setShowAlert(true);\r\n    }\r\n    if (errRef.current) {\r\n      errRef.current.focus();\r\n    }\r\n  };\r\n\r\n  //SOCIAL LOGIN REDIRECT PAGE\r\n  const google = () => {\r\n    const BaseUrl = process.env.REACT_APP_BASE_URL;\r\n    const googleAuthPath = '/auth/google';\r\n\r\n    const googleCallback = `${BaseUrl}${googleAuthPath}`;\r\n\r\n    window.open(googleCallback, '_self');\r\n  };\r\n\r\n  const facebook = () => {\r\n    const BaseUrl = process.env.REACT_APP_BASE_URL;\r\n    const facebookAuthPath = '/auth/facebook/callback';\r\n\r\n    const facebookCallback = `${BaseUrl}${facebookAuthPath}`;\r\n\r\n    window.open(facebookCallback, '_self');\r\n  };\r\n\r\n  const NavigateLogin = () => {\r\n    console.log(\"Navigating to LoginPhone\");\r\n    window.location.href = '/LoginEmail';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {success && <SuccessResetPassword onClick={NavigateLogin} />}\r\n        <>\r\n          {showAlert && <AlertMessage type=\"error\" message={errMsg} />}\r\n          <div className=\"reset-form-container\">\r\n            <form className='reset-form' onSubmit={resetPassword}>\r\n              <div className='row1'>\r\n                <div className=\"col1\"><Link to=\"/\"><img src={LogoGray} alt=\"\" className='auth-form-logo' /></Link></div>\r\n                <div className=\"col2\"><Link to=\"/LoginEmail\">Sign in</Link> to Yogeek or <Link to=\"/RegisterByEmail\">create an account</Link></div>\r\n              </div>\r\n              <div className='row2 input-container'>\r\n                <div className='col1'>\r\n                  <label htmlFor='phoneNumber'>\r\n                    Phone Number\r\n                    <FontAwesomeIcon icon={faCheck} className={validPhone ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validPhone || !phone ? \"hide\" : \"invalid\"} />\r\n                  </label>\r\n                  <Link to=\"/ResetByEmail\">Reset with email</Link></div>\r\n                <div className='col2'>\r\n                  <input\r\n                    type=\"number\"\r\n                    id='phoneNumber'\r\n                    name='phone'\r\n                    value={phone}\r\n                    placeholder='Enter your phone number'\r\n                    className='phone-number'\r\n                    onChange={(e) => {\r\n                      setPhone(e.target.value);\r\n                      handleChange(e);\r\n                    }}\r\n                    onFocus={() => setPhoneFocus(true)}\r\n                    onBlur={() => setPhoneFocus(false)}\r\n                    aria-invalid={validPhone ? \"false\" : \"true\"}\r\n                    aria-describedby=\"uidnote\"\r\n                    required\r\n                  />\r\n                  <p id=\"uidnote\" className={phoneFocus && phone && !validPhone ? \"instructions\" : \"offscreen\"}>\r\n                    <FontAwesomeIcon icon={faInfoCircle} color='red' />\r\n                    <span> Phone number format must be 10 digits</span>\r\n                  </p>\r\n                  <div className=\"plus63\">+63</div>\r\n                </div>\r\n              </div>\r\n              <div className='row3 input-container'>\r\n                <div className='col1'><b>Verification Code</b></div>\r\n                <div className='col2'>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder='Enter the verification code'\r\n                    name=\"otp\"\r\n                    value={otp}\r\n                    onChange={(e) => {\r\n                      setOtp(e.target.value);\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                  {otpTimer > 0 && (\r\n                      <div className='instructions'>\r\n                        <span>OTP sent to your phone number expires in: {otpTimer}s</span>\r\n                      </div>\r\n                    )}\r\n                  {otpSpinner ? (\r\n                    <div className='send-otp-spinner'>\r\n                      <SendOtpSpinner />\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <BtnClear type=\"button\" label={!resendOTP ? 'Send Code' : 'Resend Code'} onClick={sendOTPCode} className='send-code' disabled={!validPhone || otpTimer} />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className='row4 input-container'>\r\n                <div className='col1'>\r\n                  <label htmlFor=\"password\">New Password\r\n                    <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\r\n                  </label>\r\n                </div>\r\n                <div className='col2'>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    onChange={(e) => {\r\n                      setPwd(e.target.value);\r\n                      handleChange(e); // Assuming handleChange is another function you want to call\r\n                    }}\r\n                    value={pwd}\r\n\r\n                    aria-invalid={validPwd ? \"false\" : \"true\"}\r\n                    aria-describedby=\"pwdnote\"\r\n                    onFocus={() => setPwdFocus(true)}\r\n                    onBlur={() => setPwdFocus(false)}\r\n                    placeholder='Enter your new password'\r\n                  />\r\n                  <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\r\n                    <FontAwesomeIcon icon={faInfoCircle} />\r\n                    <span> Must be 8 to 24 characters.</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className='row5 input-container'>\r\n                <div className='col1'>\r\n                  <label htmlFor=\"confirm_pwd\">\r\n                    Confirm Password\r\n                    <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\r\n                  </label>\r\n                </div>\r\n                <div className='col2'>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"confirm_pwd\"\r\n                    onChange={(e) => setMatchPwd(e.target.value)}\r\n                    value={matchPwd}\r\n\r\n                    aria-invalid={validMatch ? \"false\" : \"true\"}\r\n                    aria-describedby=\"confirmnote\"\r\n                    onFocus={() => setMatchFocus(true)}\r\n                    onBlur={() => setMatchFocus(false)}\r\n                    placeholder='Re-enter your new password'\r\n                  />\r\n                  <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\r\n                    <FontAwesomeIcon icon={faInfoCircle} />\r\n                    <span> Must match the first password input field.</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className='row6'><LoginBtn onClick={() => setShowAlert(false)} label=\"Reset Password\" className='continue-btn reset-btn' disabled={!validPhone || !validOtp || !validPwd || !validMatch} /></div>\r\n            </form>\r\n            <div className='row7'><div className='horizontal-line'></div><small>or</small><div className='horizontal-line'></div></div>\r\n            <div className='row8'><LoginBtn icon={<FBIcon />} label='Continue with Facebook' className='facebook-btn' IconclassName='fb-icon' onClick={facebook} /></div>\r\n            <div className='row9'><LoginBtn icon={<GoogleIcon />} label='Continue with Google' className='google-btn' IconclassName='google-icon' onClick={google} /></div>\r\n            <div className='row10'><small>By continuing, you agree to Yogeek <Link to=\"#\">Conditions of Use</Link> and <Link to=\"#\">Privacy Notice</Link>.</small></div>\r\n          </div>\r\n        </>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResetByPhoneForm\r\n","import React from 'react'\r\nimport ResetByPhoneForm from '../../../components/ResetPasswordForm/ResetByPhoneForm'\r\nimport LoginFooter from '../../../layouts/LoginFooter'\r\nimport './style.scss'\r\n\r\nconst ResetByPhone = () => {\r\n  return (\r\n    <>\r\n    <div className='form-body'>\r\n        <div className='container'>\r\n          <div className=\"form-box\">\r\n            <ResetByPhoneForm />\r\n          </div>\r\n        </div>\r\n        <LoginFooter />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResetByPhone\r\n"],"names":["PHONE_REGEX","PWD_REGEX","ResetByPhoneForm","showAlert","setShowAlert","useState","errRef","useRef","phone","setPhone","validPhone","setValidPhone","phoneFocus","setPhoneFocus","otp","setOtp","validOtp","setValidOtp","pwd","setPwd","validPwd","setValidPwd","pwdFocus","setPwdFocus","matchPwd","setMatchPwd","validMatch","setValidMatch","matchFocus","setMatchFocus","errMsg","setErrMsg","success","setSuccess","otpTimer","setOtpTimer","otpSpinner","setOtpSpinner","resendOTP","setResendOTP","dispatch","useDispatch","useEffect","result","test","console","log","length","timer","setTimeout","clearTimeout","formData","setFormData","password","handleChange","e","name","value","target","_jsxs","_Fragment","children","_jsx","SuccessResetPassword","onClick","NavigateLogin","window","location","href","AlertMessage","type","message","className","onSubmit","async","preventDefault","isPhoneValid","isPasswordValid","Setloader","axios","put","status","err","errorMessage","response","error","current","focus","Link","to","src","LogoGray","alt","htmlFor","FontAwesomeIcon","icon","faCheck","faTimes","id","placeholder","onChange","onFocus","onBlur","required","faInfoCircle","color","SendOtpSpinner","BtnClear","label","disabled","LoginBtn","FBIcon","IconclassName","facebook","facebookCallback","concat","process","open","GoogleIcon","google","googleCallback","ResetByPhone","LoginFooter"],"sourceRoot":""}