{"version":3,"file":"static/js/6067.113d7724.chunk.js","mappings":"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","sources":["components/Button/BtnCategory.jsx","components/Forum/SkeletonLoading/SideNavCategoriesSkeleton.jsx","layouts/Forum/FilterNavigation/index.jsx","assets/images/replied-icon.svg","components/Forum/ForumSearchResultCard/index.jsx","pages/Forum/ForumSearchResult/index.jsx","redux/actions/forumTagsActions.js"],"sourcesContent":["import React from 'react';\r\nimport './Button.css'\r\n\r\nconst BtnCategory = ({ label, onClick, className, active }) => {\r\n  return (\r\n    <button className={`category-button ${active ? 'active' : ''} ${className}`} onClick={onClick} >\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnCategory;","import React from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport 'react-loading-skeleton/dist/skeleton.css'\r\nimport './style.scss'\r\n\r\nconst SideNavCategoriesSkeleton = ({ menus }) => {\r\n    return Array(menus)\r\n        .fill(0)\r\n        .map((_, i) => (\r\n                    <Skeleton height={35} width={205} className='side-nav-categories' />\r\n        ));\r\n};\r\n\r\nexport default SideNavCategoriesSkeleton;\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from '../../../apicalls/axios'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// import { getUser } from '../../../redux/actions/userActions';\r\nimport { getForumCategories } from '../../../redux/actions/forumCategoriesActions';\r\nimport { getAllForumTags } from '../../../redux/actions/forumTagsActions';\r\nimport './style.scss'\r\nimport { Link, useParams, useNavigate, NavLink, useLocation } from 'react-router-dom'\r\nimport DefaultAvatar from '../../../assets/images/avatar-icon.png'\r\nimport CustomSelect from '../../../components/FormField/CustomSelect'\r\nimport BtnCategory from '../../../components/Button/BtnCategory'\r\nimport FilterTagModal from '../../../components/Modal/FilterTagModal'\r\nimport SideNavCategoriesSkeleton from '../../../components/Forum/SkeletonLoading/SideNavCategoriesSkeleton'\r\nimport LoginModal from '../../../components/Modal/LoginModal'\r\n\r\n\r\nconst FilterNavigation = ({\r\n    createdDiscussionsTab,\r\n    joinedDiscussionsTab,\r\n    userActivityTab,\r\n    forumNotificationsTab,\r\n    addDiscussionsBtn,\r\n    discussionFilter,\r\n    createdDiscussionsData,\r\n    joinedDiscussionsData,\r\n    activitiesData,\r\n    paramsUserData,\r\n    notifications,\r\n    sortOptions,\r\n    onOptionSelect,\r\n    emptySortDiscussions,\r\n    className,\r\n}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const authUser = useSelector((state) => state.user.data);\r\n    const categories = useSelector((state) => state.forumcategories.data);\r\n    const tags = useSelector((state) => state.forumtags.data);\r\n    const { userId, tab } = useParams();\r\n    const userIdNumber = Number(userId);\r\n    const authUserIdNumber = Number(authUser?.id)\r\n    const navigate = useNavigate();\r\n    const location = useLocation()\r\n    const [showFilter, setShowFilter] = useState(discussionFilter)\r\n    const [activeCategory, setActiveCategory] = useState([])\r\n    const [selectedTags, setSelectedTags] = useState(\r\n        Array.isArray(location.state) ? location.state : []\r\n    );\r\n    const [filterTagModalOpen, setFilterTagModalOpen] = useState(false);\r\n    const [user, setUser] = useState({})\r\n    const [totalCreatedDiscussions, setTotalCreatedDiscussions] = useState(0)\r\n    const [totalJoinedDiscussions, setTotalJoinedDiscussions] = useState(0);\r\n    const [totalUnreadNotifications, setTotalUnreadNotifications] = useState({})\r\n    const [loadingCategories, setLoadingCategories] = useState(true)\r\n    const [loadingTags, setLoadingTags] = useState(true)\r\n    const [loginModalOpen, setLoginModalOpen] = useState(false)\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(getUser())\r\n    // }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (!categories) {\r\n            setLoadingCategories(true)\r\n            dispatch(getForumCategories());\r\n        } else {\r\n            setLoadingCategories(false)\r\n        }\r\n    }, [dispatch, categories]);\r\n\r\n    useEffect(() => {\r\n        if (tags.length === 0) {\r\n            setLoadingTags(true)\r\n            dispatch(getAllForumTags());\r\n        } else {\r\n            setLoadingTags(false)\r\n        }\r\n    }, [dispatch, tags]);\r\n\r\n    useEffect(() => {\r\n        // If location.state is not null or undefined, update state\r\n        if (location.state && location.state.selectedTags) {\r\n            setSelectedTags(location.state.selectedTags);\r\n        }\r\n    }, [location.state]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/user/${userId}`)\r\n\r\n                // Destructure only the properties you want\r\n                const { id, display_name, profile_pic, createdAt } = response.data;\r\n                setUser({ id, display_name, profile_pic, createdAt })\r\n                paramsUserData(response.data)\r\n            } catch (error) {\r\n                console.log('Error fetching data:', error)\r\n            }\r\n        }\r\n        fetchUserData()\r\n    }, [userId, paramsUserData])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const fetchForumCategories = async () => {\r\n    //         try {\r\n    //             // setLoadingCategories(true)\r\n    //             // const responseCategories = await axios.get('/api/fetchforumcategories')\r\n    //             // setCategories(responseCategories.data)\r\n\r\n    //             // const responseTags = await axios.get('/api/fetchforumtags')\r\n    //             // setTags(responseTags.data)\r\n    //             // setLoadingCategories(false)\r\n\r\n    //             // Check if 'categoriesData' is a function before calling it\r\n    //             // 'categoriesData' is expected to be a function passed as a prop for handling the fetched data\r\n    //             // If 'categoriesData' is not a function, it logs a message in the console\r\n    //             if (typeof categoriesData === 'function') {\r\n    //                 categoriesData(categories);\r\n    //                 setLoadingCategories(false)\r\n    //             }\r\n    //             if (typeof tagsData === 'function') {\r\n    //                 tagsData(tags);\r\n    //                 setLoadingCategories(false)\r\n    //             } else {\r\n    //                 setLoadingCategories(false)\r\n    //                 console.log('categoriesData is not a function');\r\n    //             }\r\n    //         } catch (error) {\r\n    //             setLoadingCategories(false)\r\n    //             console.log('Error fetching data:', error)\r\n    //         }\r\n    //     }\r\n    //     fetchForumCategories()\r\n    // }, [categoriesData, tagsData])\r\n\r\n\r\n    useEffect(() => {\r\n        if (activeCategory === null) {\r\n            setActiveCategory(categories[0].id); // or categories[0].name based on your logic\r\n        }\r\n    }, [categories, activeCategory]);\r\n\r\n    useEffect(() => {\r\n        const fetchCreatedDiscussions = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/${userId}/created/discussion`)\r\n                const descendingCD = response.data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n                setTotalCreatedDiscussions(response.data.length)\r\n                createdDiscussionsData(descendingCD)\r\n            } catch (err) {\r\n                console.log('Error fetching user created discussions:', err)\r\n            }\r\n        }\r\n        fetchCreatedDiscussions()\r\n    }, [userId, createdDiscussionsData])\r\n\r\n    useEffect(() => {\r\n        const fetchJoinedDiscussions = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/${userId}/joined/discussion`)\r\n                const descendingJD = response.data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n                setTotalJoinedDiscussions(response.data.length)\r\n                joinedDiscussionsData(descendingJD)\r\n            } catch (err) {\r\n                console.log('Error fetching user created discussions:', err)\r\n            }\r\n        }\r\n        fetchJoinedDiscussions()\r\n    }, [userId, joinedDiscussionsData])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchForumActivities = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/forum-activities/${userId}`)\r\n                const sortedActivities = response.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                activitiesData(sortedActivities)\r\n            } catch (err) {\r\n                console.log('Error fetching forum activities:', err)\r\n            }\r\n        }\r\n        fetchForumActivities()\r\n    }, [userId, activitiesData])\r\n\r\n    useEffect(() => {\r\n        const getTotalUnreadNotifications = async () => {\r\n            try {\r\n                const response = await axios.get('/api/total-forum-notifications')\r\n                setTotalUnreadNotifications(response.data)\r\n            } catch (error) {\r\n                console.log('Error fetching total unread notifications', error)\r\n            }\r\n        }\r\n        getTotalUnreadNotifications()\r\n    }, [notifications])\r\n\r\n\r\n    useEffect(() => {\r\n        switch (tab) {\r\n            case 'created_discussions':\r\n                createdDiscussionsTab();\r\n                setShowFilter(true);\r\n                break;\r\n            case 'joined_discussions':\r\n                joinedDiscussionsTab();\r\n                setShowFilter(true);\r\n                break;\r\n            case 'user_activity':\r\n                userActivityTab();\r\n                setShowFilter(false);\r\n                break;\r\n            case 'notifications':\r\n                forumNotificationsTab();\r\n                setShowFilter(false);\r\n                break;\r\n            case 'add_discussions':\r\n                addDiscussionsBtn();\r\n                setShowFilter(false);\r\n                break;\r\n            default:\r\n                // Optional: Handle unknown tabs\r\n                break;\r\n        }\r\n    }, [tab, navigate, createdDiscussionsTab, joinedDiscussionsTab, userActivityTab, forumNotificationsTab, addDiscussionsBtn]);\r\n\r\n\r\n\r\n    const handleCreatedDiscussions = () => {\r\n        navigate(`/forum/profile/${userId}/created_discussions`);\r\n        createdDiscussionsTab(); // Call the function\r\n    };\r\n    const handleJoinedDiscussions = () => {\r\n        navigate(`/forum/profile/${userId}/joined_discussions`);\r\n        joinedDiscussionsTab(); // Call the function\r\n    };\r\n    const handleUserActivity = () => {\r\n        navigate(`/forum/profile/${userId}/user_activity`);\r\n        userActivityTab(); // Call the function\r\n    };\r\n    const handleForumNotifications = () => {\r\n        navigate(`/forum/profile/${userId}/notifications`);\r\n        forumNotificationsTab(); // Call the function\r\n    };\r\n\r\n    const handleSelectedCategory = () => {\r\n        if (typeof emptySortDiscussions === 'function') {\r\n            emptySortDiscussions([]);\r\n        }\r\n    }\r\n\r\n    const toggleTag = (tag_id) => {\r\n        setSelectedTags((prevSelectedTags) => {\r\n            const updatedTags = prevSelectedTags.includes(tag_id)\r\n                ? prevSelectedTags.filter((t) => t !== tag_id)\r\n                : [...prevSelectedTags, tag_id];\r\n\r\n            if (typeof emptySortDiscussions === 'function') {\r\n                emptySortDiscussions([]);\r\n            }\r\n\r\n            // Navigate with the updatedTags directly\r\n            navigate('/forum/filtertags', { state: { selectedTags: updatedTags } });\r\n\r\n            return updatedTags;\r\n        });\r\n    };\r\n\r\n    const toggleLoginModal = () => {\r\n        setLoginModalOpen((prevLoginModalOpen) => !prevLoginModalOpen)\r\n    }\r\n\r\n    const toggleTagModal = () => {\r\n        setFilterTagModalOpen((prev) => !prev)\r\n    }\r\n\r\n    const clearAllTags = () => {\r\n        const updatedTags = []; // No tags selected\r\n        setSelectedTags(updatedTags);\r\n        navigate('/forum/filtertags', { state: { selectedTags: updatedTags } });\r\n    };\r\n\r\n\r\n    const originalDate = user?.createdAt || '';\r\n    const formattedDate = new Date(originalDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long' });\r\n\r\n    return (\r\n        <>\r\n            {loginModalOpen && <LoginModal onClick={toggleLoginModal} />}\r\n            {filterTagModalOpen && <FilterTagModal onClick={toggleTagModal} tagsData={tags} />}\r\n            <div className={`forum-category-page-filter-nav ${className}`}>\r\n                {!authUser ? (\r\n                    <>\r\n                        <div className='forum-category-page-row1 not-authenticated'>\r\n                            <p>Join our community, elevate your marketplace experience!</p>\r\n                            <button type='button' className='forum-login-btn' onClick={toggleLoginModal}>Sign In</button>\r\n                            <p>Don’t have a Yogeek account? <Link to='/registerbyemail'>Sign up</Link></p>\r\n                        </div>\r\n                        {userId && <div className='forum-category-page-row1'>\r\n                            <div className='forum-category-page-row1-row1'>\r\n                                <img src={user.profile_pic || DefaultAvatar} alt=\"\" className='forum-profile-pic' />\r\n                                <div className='user-display-name'>\r\n                                    <p>{user.display_name}</p>\r\n                                    <small>Joined in {formattedDate}</small>\r\n                                </div>\r\n                            </div>\r\n                            <ul className='forum-profile-menu'>\r\n                                <li onClick={handleCreatedDiscussions}>Created Discussions <span className='forum-activity-counter'>({totalCreatedDiscussions})</span></li>\r\n                                <li onClick={handleJoinedDiscussions}>Joined Discussions <span className='forum-activity-counter'>({totalJoinedDiscussions})</span></li>\r\n                                <li onClick={handleUserActivity}>Latest Activity</li>\r\n                                {authUserIdNumber === userIdNumber ? (\r\n                                    <li onClick={handleForumNotifications} className='forum-notifications'>Notifications {totalUnreadNotifications.totalCount > 0 && <div className='forum-notification-counter'>{totalUnreadNotifications.totalCount}</div>}</li>\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n\r\n                            </ul>\r\n                        </div>\r\n                        }\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {userId && (\r\n                            <div className='forum-category-page-row1'>\r\n                                <div className='forum-category-page-row1-row1'>\r\n                                    <img src={user.profile_pic || DefaultAvatar} alt=\"\" className='forum-profile-pic' />\r\n                                    <div className='user-display-name'>\r\n                                        <p>{user.display_name}</p>\r\n                                        <small>Joined in {formattedDate}</small>\r\n                                    </div>\r\n                                </div>\r\n                                <ul className='forum-profile-menu'>\r\n                                    <li onClick={handleCreatedDiscussions}>Created Discussions <span className='forum-activity-counter'>({totalCreatedDiscussions})</span></li>\r\n                                    <li onClick={handleJoinedDiscussions}>Joined Discussions <span className='forum-activity-counter'>({totalJoinedDiscussions})</span></li>\r\n                                    <li onClick={handleUserActivity}>Latest Activity</li>\r\n                                    {authUserIdNumber === userIdNumber ? (\r\n                                        <li onClick={handleForumNotifications} className='forum-notifications'>Notifications {totalUnreadNotifications.totalCount > 0 && <div className='forum-notification-counter'>{totalUnreadNotifications.totalCount}</div>}</li>\r\n                                    ) : (\r\n                                        null\r\n                                    )}\r\n\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n                {showFilter && (\r\n                    <>\r\n                        <div className='forum-sortby'>\r\n                            <label>SORT BY</label>\r\n                            <CustomSelect\r\n                                data={sortOptions}\r\n                                onOptionSelect={onOptionSelect}\r\n                                className='forum-sortby-dropdown-select'\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <div className='forum-category-page-row2'>\r\n                    <div className='section-label-container'>\r\n                        <label>CATEGORIES</label>\r\n                    </div>\r\n                    <div className=\"forum-category-btn-container\">\r\n                        {loadingCategories &&\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '3px' }}>\r\n                                <SideNavCategoriesSkeleton menus={8} />\r\n                            </div>\r\n                        }\r\n                        {categories?.categories?.map(category => (\r\n                            <NavLink activeclassname=\"active\" key={category.id} className='forum-category-menu' to={`/forum/category/${category.id}/${category.name}`} onClick={handleSelectedCategory}>{category.name}</NavLink>\r\n                        ))}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className='forum-category-page-row3'>\r\n                    <div className='section-label-container'>\r\n                        <label>POPULAR TAGS</label>\r\n                    </div>\r\n                    <div className=\"forum-category-btn-container\">\r\n                        {loadingTags &&\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '3px' }}>\r\n                                <SideNavCategoriesSkeleton menus={8} />\r\n                            </div>\r\n                        }\r\n                        {tags.slice(0, 10).map(tag => (\r\n                            <BtnCategory\r\n                                key={tag.id}\r\n                                onClick={() => toggleTag(tag.id)}\r\n                                label={tag.name}\r\n                                className={`tag-btn ${selectedTags.includes(tag.id) ? 'active' : ''}`}\r\n                            />\r\n                        ))}\r\n                        <div className='more-tags' style={{ justifyContent: selectedTags.length > 0 ? ('space-between') : ('end') }}>\r\n                            {selectedTags && selectedTags.length > 0 && <button onClick={clearAllTags}>Clear all</button>}\r\n                            <button onClick={toggleTagModal}>Select more tags</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default FilterNavigation;","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgRepliedIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 12,\n    height: 10,\n    viewBox: \"0 0 12 10\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.33333 7.33333V10L12 5.33333L7.33333 0.666666V3.4C4 3.4 1.66667 2.33333 -9.53674e-07 0C0.666666 3.33333 2.66667 6.66667 7.33333 7.33333Z\",\n    fill: \"#303030\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRepliedIcon);\nexport default __webpack_public_path__ + \"static/media/replied-icon.7fb9985c967ad0ff5cd283e288a11f21.svg\";\nexport { ForwardRef as ReactComponent };","import './style.scss'\r\nimport { Link } from 'react-router-dom';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { enUS } from 'date-fns/locale';\r\nimport { ReactComponent as Like } from '../../../assets/images/like-icon.svg'\r\nimport { ReactComponent as MsgIcon } from '../../../assets/images/message-icon.svg'\r\nimport { ReactComponent as EyeIcon } from '../../../assets/images/eye-solid.svg'\r\nimport { ReactComponent as RepliedIcon } from '../../../assets/images/replied-icon.svg'\r\nimport DefaultAvatar from '../../../assets/images/avatar-icon.png'\r\n\r\nconst ForumSearchResultCard = ({ data }) => {\r\n\r\n    // Function to safely parse and format the date\r\n    const getFormattedDate = (dateString) => {\r\n        if (typeof dateString !== 'string') {\r\n            return 'Invalid date';\r\n        }\r\n\r\n        const date = new Date(dateString);\r\n        return isNaN(date.getTime())\r\n            ? 'Invalid date'\r\n            : formatDistanceToNow(date, { addSuffix: true, locale: enUS });\r\n    };\r\n\r\n    const getTotalReplies = (posts) => {\r\n        let totalReplies = 0;\r\n\r\n        const countReplies = (post) => {\r\n            totalReplies += post.replies.length;\r\n            post.replies.forEach(countReplies); // Recursively count replies\r\n        };\r\n\r\n        posts.forEach(countReplies);\r\n        return totalReplies;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {data?.map(discussion => (\r\n                <div className=\"forum-discussion-card\" key={discussion?.post?.post_id}>\r\n                    <div className='forum-discussion-card-row1'>\r\n                        <Link to={`/forum/profile/${discussion?.user_id}/created_discussions`}>\r\n                            <img src={discussion?.discussionStarter?.profile_pic || DefaultAvatar} alt='' />\r\n                        </Link>\r\n                        <div className='forum-discussion-info'>\r\n                            <Link to={`/forum/discussion/${discussion?.discussion_id}?repliedPostId=${discussion?.post?.post_id}`}>\r\n                                <h6>{discussion?.discussion_title}</h6>\r\n                            </Link>\r\n                            <small>\r\n                                by&nbsp;\r\n                                <Link to={`/forum/profile/${discussion?.discussion_user_id}/created_discussions`}>\r\n                                    {discussion?.discussionStarter?.display_name}\r\n                                </Link>\r\n                                &nbsp;{getFormattedDate(discussion?.discussion_created_at)}\r\n                            </small>\r\n                        </div>\r\n                    </div>\r\n                    {discussion?.post?.level !== 0 && <div className='replied-icon'><RepliedIcon /> <small>Replied Post</small></div>}\r\n                    <div className='forum-discussion-card-row2'>\r\n                        <div dangerouslySetInnerHTML={{ __html: discussion?.post?.content }} />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForumSearchResultCard;\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport axios from '../../../apicalls/axios';\r\nimport './style.scss'\r\nimport Header from '../../../layouts/Forum/Header'\r\nimport Footer from '../../../layouts/Forum/Footer'\r\nimport GTranslate from '../../../components/GTranslate';\r\nimport NewDiscussionBtn from '../../../components/Button/NewDiscussionBtn'\r\nimport ForumSearchResultCard from '../../../components/Forum/ForumSearchResultCard'\r\nimport FilterNavigation from '../../../layouts/Forum/FilterNavigation'\r\nimport SearchDiscussionBox from '../../../components/SearchDiscussionBox'\r\nimport LoginModal from '../../../components/Modal/LoginModal';\r\n\r\n\r\nconst ForumSearchResult = () => {\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const user = useSelector((state) => state.user.data);\r\n    const searchTerm = new URLSearchParams(location.search).get('keyword');\r\n    const [searchResultsData, setSearchResultsData] = useState([])\r\n    const [discussionFilter] = useState(false)\r\n    const [loginModalOpen, setLoginModalOpen] = useState(false)\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n    const [totalDiscussions, setTotalDiscussions] = useState(null)\r\n    const [limit] = useState(15);\r\n\r\n\r\n    useEffect(() => {\r\n        fetchSearchResults(currentPage);\r\n    }, [currentPage, location.search, searchTerm])\r\n\r\n\r\n    const fetchSearchResults = async (page = 1) => {\r\n        setSearchResultsData([])\r\n        try {\r\n            const params = {\r\n                page,\r\n                limit\r\n            }\r\n            const response = await axios.get(`/api/search-post?keyword=${searchTerm}`, { params })\r\n            setTotalDiscussions(response.data.totalDiscussions);\r\n            setTotalPages(response.data.totalPages);\r\n            setSearchResultsData(response.data.discussions)\r\n        } catch (err) {\r\n            console.error('Error fetching search results:', err);\r\n        }\r\n    }\r\n\r\n    const handlePageChange = (page) => {\r\n        if (page >= 1 && page <= totalPages) {\r\n            setCurrentPage(page);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const handleNewDiscussionClick = () => {\r\n        if (!user) {\r\n            setLoginModalOpen(true)\r\n        } else {\r\n            navigate(`/forum/profile/${user.id}/add_discussions`);\r\n        }\r\n    };\r\n\r\n    const toggleLoginModal = () => {\r\n        setLoginModalOpen((prevLoginModalOpen) => !prevLoginModalOpen)\r\n    }\r\n\r\n    const loginModal = () => {\r\n        setLoginModalOpen(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loginModalOpen && <LoginModal onClick={toggleLoginModal} />}\r\n            <div className='forum-page-container'>\r\n                <Header authUser={user} />\r\n                <div>\r\n                    <div className=\"forum-search-result-page-container\">\r\n                        <FilterNavigation\r\n                            authUser={user}\r\n                            discussionFilter={discussionFilter}\r\n                            onClick={loginModal}\r\n                        />\r\n                        <div className='forum-search-result-page-col2'>\r\n                            <div className='language-selector-container'>\r\n                                <GTranslate />\r\n                            </div>\r\n                            <SearchDiscussionBox />\r\n                            <div className=\"search-result-list-container\">\r\n                                <div className=\"search-query-result-info\">\r\n                                    <div className='search-query-result-info-row1'>\r\n                                        <div className=\"used-search-keyword\">\r\n                                            <h4>Search results for \"{searchTerm}\"</h4>\r\n                                            <span>({totalDiscussions} {totalDiscussions > 1 ? 'posts found' : 'post found'})</span>\r\n                                        </div>\r\n                                        <NewDiscussionBtn onClick={handleNewDiscussionClick} label='Start a discussion' />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='discussion-list'>\r\n                                    <ForumSearchResultCard data={searchResultsData} />\r\n                                </div>\r\n                                {totalDiscussions > 15 &&\r\n                                    <div className=\"pagination\">\r\n                                        <li className='page-item'>\r\n                                            <button\r\n                                                onClick={() => handlePageChange(currentPage - 1)}\r\n                                                disabled={currentPage === 1}\r\n                                                className='page-link'\r\n                                            >\r\n                                                Previous\r\n                                            </button>\r\n                                        </li>\r\n                                        {Array.from({ length: totalPages }, (_, index) => index + 1).map((page) => (\r\n                                            <li key={page} className='page-item'>\r\n                                                <button\r\n                                                    onClick={() => handlePageChange(page)}\r\n                                                    className={page === currentPage ? 'active page-link' : 'page-link'}\r\n                                                >\r\n                                                    {page}\r\n                                                </button>\r\n                                            </li>\r\n                                        ))}\r\n                                        <li className='page-item'>\r\n                                            <button\r\n                                                onClick={() => handlePageChange(currentPage + 1)}\r\n                                                disabled={currentPage === totalPages}\r\n                                                className='page-link'\r\n                                            >\r\n                                                Next\r\n                                            </button>\r\n                                        </li>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Footer className='forum-search-results-footer' />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ForumSearchResult;","import { setTags, setError } from '../reducer/forumTagsSlice';\r\nimport axios from '../../apicalls/axios';\r\n\r\n\r\n// Get Forum Tags\r\nexport const getAllForumTags = () => async (dispatch) => {\r\n  try {\r\n    const response = await axios.get('/api/fetchforumtags');\r\n    if (response.status === 200) {\r\n      const forumTagsData = response.data;\r\n      dispatch(setTags(forumTagsData));\r\n    } \r\n  } catch (error) {\r\n    console.error('Error fetching forum tags:', error);\r\n\r\n    // Handle the error and update the error state in the Redux store\r\n    dispatch(setError('Error fetching forum tags.'));\r\n  }\r\n};\r\n"],"names":["_ref","label","onClick","className","active","_jsx","concat","children","menus","Array","fill","map","_","i","Skeleton","height","width","_categories$categorie","createdDiscussionsTab","joinedDiscussionsTab","userActivityTab","forumNotificationsTab","addDiscussionsBtn","discussionFilter","createdDiscussionsData","joinedDiscussionsData","activitiesData","paramsUserData","notifications","sortOptions","onOptionSelect","emptySortDiscussions","dispatch","useDispatch","authUser","useSelector","state","user","data","categories","forumcategories","tags","forumtags","userId","tab","useParams","userIdNumber","Number","authUserIdNumber","id","navigate","useNavigate","location","useLocation","showFilter","setShowFilter","useState","activeCategory","setActiveCategory","selectedTags","setSelectedTags","isArray","filterTagModalOpen","setFilterTagModalOpen","setUser","totalCreatedDiscussions","setTotalCreatedDiscussions","totalJoinedDiscussions","setTotalJoinedDiscussions","totalUnreadNotifications","setTotalUnreadNotifications","loadingCategories","setLoadingCategories","loadingTags","setLoadingTags","loginModalOpen","setLoginModalOpen","useEffect","getForumCategories","length","getAllForumTags","async","response","axios","get","display_name","profile_pic","createdAt","error","console","log","fetchUserData","descendingCD","sort","a","b","Date","created_at","err","fetchCreatedDiscussions","descendingJD","fetchJoinedDiscussions","sortedActivities","fetchForumActivities","getTotalUnreadNotifications","handleCreatedDiscussions","handleJoinedDiscussions","handleUserActivity","handleForumNotifications","handleSelectedCategory","toggleLoginModal","prevLoginModalOpen","toggleTagModal","prev","originalDate","formattedDate","toLocaleDateString","year","month","_jsxs","_Fragment","LoginModal","FilterTagModal","tagsData","src","DefaultAvatar","alt","totalCount","type","Link","to","CustomSelect","style","display","flexWrap","gap","SideNavCategoriesSkeleton","category","NavLink","activeclassname","name","slice","tag","BtnCategory","toggleTag","tag_id","prevSelectedTags","updatedTags","includes","filter","t","justifyContent","clearAllTags","_path","_extends","Object","assign","bind","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","SvgRepliedIcon","svgRef","title","titleId","props","viewBox","xmlns","ref","d","ForwardRef","getFormattedDate","dateString","date","isNaN","getTime","formatDistanceToNow","addSuffix","locale","enUS","discussion","_discussion$post","_discussion$discussio","_discussion$post2","_discussion$discussio2","_discussion$post3","_discussion$post4","user_id","discussionStarter","discussion_id","post","post_id","discussion_title","discussion_user_id","discussion_created_at","level","RepliedIcon","dangerouslySetInnerHTML","__html","content","ForumSearchResult","searchTerm","URLSearchParams","search","searchResultsData","setSearchResultsData","currentPage","setCurrentPage","totalPages","setTotalPages","totalDiscussions","setTotalDiscussions","limit","fetchSearchResults","page","undefined","params","discussions","handlePageChange","Header","FilterNavigation","loginModal","GTranslate","SearchDiscussionBox","NewDiscussionBtn","handleNewDiscussionClick","ForumSearchResultCard","disabled","from","index","Footer","status","forumTagsData","setTags","setError"],"sourceRoot":""}