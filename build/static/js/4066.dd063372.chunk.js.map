{"version":3,"file":"static/js/4066.dd063372.chunk.js","mappings":"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","sources":["components/Button/BtnCategory.jsx","components/Forum/ForumSubCategoryCard/index.jsx","components/Forum/SkeletonLoading/SideNavCategoriesSkeleton.jsx","layouts/Forum/FilterNavigation/index.jsx","redux/actions/forumTagsActions.js"],"sourcesContent":["import React from 'react';\r\nimport './Button.css'\r\n\r\nconst BtnCategory = ({ label, onClick, className, active }) => {\r\n  return (\r\n    <button className={`category-button ${active ? 'active' : ''} ${className}`} onClick={onClick} >\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BtnCategory;","import { Link } from 'react-router-dom'\r\nimport './style.scss'\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { enUS } from 'date-fns/locale';\r\nimport { ReactComponent as GroupMsgIcon } from '../../../assets/images/group-message-icon.svg'\r\nimport { ReactComponent as MsgIcon } from '../../../assets/images/message-icon.svg'\r\nimport { ReactComponent as EyeIcon } from '../../../assets/images/eye-solid.svg'\r\n\r\nconst ForumSubCategory = ({ data }) => {\r\n\r\n    const combinedData = data.subcategories.map((subcategory) => {\r\n        // Find matching discussions based on forum_category_id\r\n        const matchingDiscussions = data.allDiscussions.filter(discussion => discussion.forum_category_id === subcategory.id);\r\n\r\n        // Function to find the latest post in a discussion, including replies\r\n        const findLatestPost = (posts) => {\r\n            let latestPost = null;\r\n\r\n            const checkPost = (post) => {\r\n                // Compare current post's created_at with the latest post found\r\n                if (!latestPost || new Date(post?.created_at) > new Date(latestPost?.created_at)) {\r\n                    latestPost = post;\r\n                }\r\n\r\n                // Recursively check replies\r\n                post.replies.forEach(checkPost);\r\n            };\r\n\r\n            // Start the search for latest post from all top-level posts\r\n            posts.forEach(checkPost);\r\n\r\n            return latestPost;\r\n        };\r\n\r\n        // Gather all posts (including replies) across all discussions\r\n        let allPosts = [];\r\n\r\n        matchingDiscussions.forEach(discussion => {\r\n            allPosts = [...allPosts, ...discussion.post]; // Add top-level posts\r\n            discussion.post.forEach(post => {\r\n                allPosts = [...allPosts, ...post.replies]; // Add replies\r\n            });\r\n        });\r\n\r\n        // Find the latest post across all posts in this subcategory\r\n        const latestPost = findLatestPost(allPosts); \r\n\r\n        // Function to calculate total replies\r\n        const getTotalReplies = (posts) => {\r\n            let totalReplies = 0;\r\n\r\n            const countReplies = (post) => {\r\n                totalReplies += post.replies.length;\r\n                post.replies.forEach(countReplies); // Recursively count replies\r\n            };\r\n\r\n            posts.forEach(countReplies);\r\n            return totalReplies;\r\n        };\r\n\r\n        // Calculate total posts for all discussions (top-level posts + replies)\r\n        const totalPosts = matchingDiscussions.reduce((count, discussion) => {\r\n            const topLevelPostsCount = discussion.post ? discussion.post.length : 0; // Count top-level posts\r\n            const repliesCount = getTotalReplies(discussion.post); // Count replies\r\n            return count + topLevelPostsCount + repliesCount; // Total posts = top-level + replies\r\n        }, 0);\r\n\r\n        // Calculate total views of all posts for each subcategory\r\n        const totalViews = matchingDiscussions.reduce((count, discussion) => {\r\n            return count + (discussion.post[0]?.views || 0);  // Access views from the first post\r\n        }, 0);\r\n\r\n        // Return the subcategory with the matching discussions and total counts\r\n        return {\r\n            ...subcategory,               // Keep subcategory data\r\n            discussions: matchingDiscussions, // Add discussions with latest post\r\n            totalPosts,                   // Add total post count\r\n            totalViews,\r\n            latestPost                    // Add latest post info\r\n        };\r\n    });\r\n\r\n    console.log(combinedData);\r\n    \r\n// Function to safely parse and format the date\r\nconst getFormattedDate = (dateString) => {\r\n    // Ensure dateString is a valid ISO string\r\n    if (typeof dateString !== 'string') {\r\n        return 'Invalid date';\r\n    }\r\n\r\n    const date = new Date(dateString);\r\n\r\n    // Check if date is valid\r\n    return isNaN(date.getTime())\r\n        ? 'Invalid date'\r\n        : formatDistanceToNow(date, { addSuffix: true, locale: enUS });\r\n};\r\n\r\n\r\n    return (\r\n        <>\r\n            {combinedData.map(item => (\r\n                <div className=\"forum-sub-category\" key={item.id}>\r\n                    <div className='forum-sub-category-col1'>\r\n                        <div className='forum-sub-category-info'>\r\n                            <div className='forum-sub-category-icon'><GroupMsgIcon /></div>\r\n                            <div className='forum-sub-category-title-desc'>\r\n                                <Link to={`/forum/subcategory/${item.id}/${item.name}`}><h5>{item.name}</h5></Link>\r\n                                <span>{item.description}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='forum-sub-category-col2'>\r\n                        <div className=\"view-reply-counter\">\r\n                            <div className=\"reply-counter\">\r\n                                <div className='reply-msg-icon'><MsgIcon /></div>\r\n                                <span>{item.totalPosts}</span>\r\n                            </div>\r\n                            <div className=\"view-counter\">\r\n                                <div className='view-msg-icon'><EyeIcon /></div>\r\n                                <span>{item.totalViews}</span>\r\n                            </div>\r\n                            <span className=\"last-activity-time\">{item.discussions.length > 0 ? (getFormattedDate(item.latestPost?.created_at)) : 'no activity'}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForumSubCategory\r\n","import React from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport 'react-loading-skeleton/dist/skeleton.css'\r\nimport './style.scss'\r\n\r\nconst SideNavCategoriesSkeleton = ({ menus }) => {\r\n    return Array(menus)\r\n        .fill(0)\r\n        .map((_, i) => (\r\n                    <Skeleton height={35} width={205} className='side-nav-categories' />\r\n        ));\r\n};\r\n\r\nexport default SideNavCategoriesSkeleton;\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from '../../../apicalls/axios'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// import { getUser } from '../../../redux/actions/userActions';\r\nimport { getForumCategories } from '../../../redux/actions/forumCategoriesActions';\r\nimport { getAllForumTags } from '../../../redux/actions/forumTagsActions';\r\nimport './style.scss'\r\nimport { Link, useParams, useNavigate, NavLink, useLocation } from 'react-router-dom'\r\nimport DefaultAvatar from '../../../assets/images/avatar-icon.png'\r\nimport CustomSelect from '../../../components/FormField/CustomSelect'\r\nimport BtnCategory from '../../../components/Button/BtnCategory'\r\nimport FilterTagModal from '../../../components/Modal/FilterTagModal'\r\nimport SideNavCategoriesSkeleton from '../../../components/Forum/SkeletonLoading/SideNavCategoriesSkeleton'\r\nimport LoginModal from '../../../components/Modal/LoginModal'\r\n\r\n\r\nconst FilterNavigation = ({\r\n    createdDiscussionsTab,\r\n    joinedDiscussionsTab,\r\n    userActivityTab,\r\n    forumNotificationsTab,\r\n    addDiscussionsBtn,\r\n    discussionFilter,\r\n    createdDiscussionsData,\r\n    joinedDiscussionsData,\r\n    activitiesData,\r\n    paramsUserData,\r\n    notifications,\r\n    sortOptions,\r\n    onOptionSelect,\r\n    emptySortDiscussions,\r\n    className,\r\n}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const authUser = useSelector((state) => state.user.data);\r\n    const categories = useSelector((state) => state.forumcategories.data);\r\n    const tags = useSelector((state) => state.forumtags.data);\r\n    const { userId, tab } = useParams();\r\n    const userIdNumber = Number(userId);\r\n    const authUserIdNumber = Number(authUser?.id)\r\n    const navigate = useNavigate();\r\n    const location = useLocation()\r\n    const [showFilter, setShowFilter] = useState(discussionFilter)\r\n    const [activeCategory, setActiveCategory] = useState([])\r\n    const [selectedTags, setSelectedTags] = useState(\r\n        Array.isArray(location.state) ? location.state : []\r\n    );\r\n    const [filterTagModalOpen, setFilterTagModalOpen] = useState(false);\r\n    const [user, setUser] = useState({})\r\n    const [totalCreatedDiscussions, setTotalCreatedDiscussions] = useState(0)\r\n    const [totalJoinedDiscussions, setTotalJoinedDiscussions] = useState(0);\r\n    const [totalUnreadNotifications, setTotalUnreadNotifications] = useState({})\r\n    const [loadingCategories, setLoadingCategories] = useState(true)\r\n    const [loadingTags, setLoadingTags] = useState(true)\r\n    const [loginModalOpen, setLoginModalOpen] = useState(false)\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(getUser())\r\n    // }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (!categories) {\r\n            setLoadingCategories(true)\r\n            dispatch(getForumCategories());\r\n        } else {\r\n            setLoadingCategories(false)\r\n        }\r\n    }, [dispatch, categories]);\r\n\r\n    useEffect(() => {\r\n        if (tags.length === 0) {\r\n            setLoadingTags(true)\r\n            dispatch(getAllForumTags());\r\n        } else {\r\n            setLoadingTags(false)\r\n        }\r\n    }, [dispatch, tags]);\r\n\r\n    useEffect(() => {\r\n        // If location.state is not null or undefined, update state\r\n        if (location.state && location.state.selectedTags) {\r\n            setSelectedTags(location.state.selectedTags);\r\n        }\r\n    }, [location.state]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/user/${userId}`)\r\n\r\n                // Destructure only the properties you want\r\n                const { id, display_name, profile_pic, createdAt } = response.data;\r\n                setUser({ id, display_name, profile_pic, createdAt })\r\n                paramsUserData(response.data)\r\n            } catch (error) {\r\n                console.log('Error fetching data:', error)\r\n            }\r\n        }\r\n        fetchUserData()\r\n    }, [userId, paramsUserData])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const fetchForumCategories = async () => {\r\n    //         try {\r\n    //             // setLoadingCategories(true)\r\n    //             // const responseCategories = await axios.get('/api/fetchforumcategories')\r\n    //             // setCategories(responseCategories.data)\r\n\r\n    //             // const responseTags = await axios.get('/api/fetchforumtags')\r\n    //             // setTags(responseTags.data)\r\n    //             // setLoadingCategories(false)\r\n\r\n    //             // Check if 'categoriesData' is a function before calling it\r\n    //             // 'categoriesData' is expected to be a function passed as a prop for handling the fetched data\r\n    //             // If 'categoriesData' is not a function, it logs a message in the console\r\n    //             if (typeof categoriesData === 'function') {\r\n    //                 categoriesData(categories);\r\n    //                 setLoadingCategories(false)\r\n    //             }\r\n    //             if (typeof tagsData === 'function') {\r\n    //                 tagsData(tags);\r\n    //                 setLoadingCategories(false)\r\n    //             } else {\r\n    //                 setLoadingCategories(false)\r\n    //                 console.log('categoriesData is not a function');\r\n    //             }\r\n    //         } catch (error) {\r\n    //             setLoadingCategories(false)\r\n    //             console.log('Error fetching data:', error)\r\n    //         }\r\n    //     }\r\n    //     fetchForumCategories()\r\n    // }, [categoriesData, tagsData])\r\n\r\n\r\n    useEffect(() => {\r\n        if (activeCategory === null) {\r\n            setActiveCategory(categories[0].id); // or categories[0].name based on your logic\r\n        }\r\n    }, [categories, activeCategory]);\r\n\r\n    useEffect(() => {\r\n        const fetchCreatedDiscussions = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/${userId}/created/discussion`)\r\n                const descendingCD = response.data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n                setTotalCreatedDiscussions(response.data.length)\r\n                createdDiscussionsData(descendingCD)\r\n            } catch (err) {\r\n                console.log('Error fetching user created discussions:', err)\r\n            }\r\n        }\r\n        fetchCreatedDiscussions()\r\n    }, [userId, createdDiscussionsData])\r\n\r\n    useEffect(() => {\r\n        const fetchJoinedDiscussions = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/${userId}/joined/discussion`)\r\n                const descendingJD = response.data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n                setTotalJoinedDiscussions(response.data.length)\r\n                joinedDiscussionsData(descendingJD)\r\n            } catch (err) {\r\n                console.log('Error fetching user created discussions:', err)\r\n            }\r\n        }\r\n        fetchJoinedDiscussions()\r\n    }, [userId, joinedDiscussionsData])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchForumActivities = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/forum-activities/${userId}`)\r\n                const sortedActivities = response.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                activitiesData(sortedActivities)\r\n            } catch (err) {\r\n                console.log('Error fetching forum activities:', err)\r\n            }\r\n        }\r\n        fetchForumActivities()\r\n    }, [userId, activitiesData])\r\n\r\n    useEffect(() => {\r\n        const getTotalUnreadNotifications = async () => {\r\n            try {\r\n                const response = await axios.get('/api/total-forum-notifications')\r\n                setTotalUnreadNotifications(response.data)\r\n            } catch (error) {\r\n                console.log('Error fetching total unread notifications', error)\r\n            }\r\n        }\r\n        getTotalUnreadNotifications()\r\n    }, [notifications])\r\n\r\n\r\n    useEffect(() => {\r\n        switch (tab) {\r\n            case 'created_discussions':\r\n                createdDiscussionsTab();\r\n                setShowFilter(true);\r\n                break;\r\n            case 'joined_discussions':\r\n                joinedDiscussionsTab();\r\n                setShowFilter(true);\r\n                break;\r\n            case 'user_activity':\r\n                userActivityTab();\r\n                setShowFilter(false);\r\n                break;\r\n            case 'notifications':\r\n                forumNotificationsTab();\r\n                setShowFilter(false);\r\n                break;\r\n            case 'add_discussions':\r\n                addDiscussionsBtn();\r\n                setShowFilter(false);\r\n                break;\r\n            default:\r\n                // Optional: Handle unknown tabs\r\n                break;\r\n        }\r\n    }, [tab, navigate, createdDiscussionsTab, joinedDiscussionsTab, userActivityTab, forumNotificationsTab, addDiscussionsBtn]);\r\n\r\n\r\n\r\n    const handleCreatedDiscussions = () => {\r\n        navigate(`/forum/profile/${userId}/created_discussions`);\r\n        createdDiscussionsTab(); // Call the function\r\n    };\r\n    const handleJoinedDiscussions = () => {\r\n        navigate(`/forum/profile/${userId}/joined_discussions`);\r\n        joinedDiscussionsTab(); // Call the function\r\n    };\r\n    const handleUserActivity = () => {\r\n        navigate(`/forum/profile/${userId}/user_activity`);\r\n        userActivityTab(); // Call the function\r\n    };\r\n    const handleForumNotifications = () => {\r\n        navigate(`/forum/profile/${userId}/notifications`);\r\n        forumNotificationsTab(); // Call the function\r\n    };\r\n\r\n    const handleSelectedCategory = () => {\r\n        if (typeof emptySortDiscussions === 'function') {\r\n            emptySortDiscussions([]);\r\n        }\r\n    }\r\n\r\n    const toggleTag = (tag_id) => {\r\n        setSelectedTags((prevSelectedTags) => {\r\n            const updatedTags = prevSelectedTags.includes(tag_id)\r\n                ? prevSelectedTags.filter((t) => t !== tag_id)\r\n                : [...prevSelectedTags, tag_id];\r\n\r\n            if (typeof emptySortDiscussions === 'function') {\r\n                emptySortDiscussions([]);\r\n            }\r\n\r\n            // Navigate with the updatedTags directly\r\n            navigate('/forum/filtertags', { state: { selectedTags: updatedTags } });\r\n\r\n            return updatedTags;\r\n        });\r\n    };\r\n\r\n    const toggleLoginModal = () => {\r\n        setLoginModalOpen((prevLoginModalOpen) => !prevLoginModalOpen)\r\n    }\r\n\r\n    const toggleTagModal = () => {\r\n        setFilterTagModalOpen((prev) => !prev)\r\n    }\r\n\r\n    const clearAllTags = () => {\r\n        const updatedTags = []; // No tags selected\r\n        setSelectedTags(updatedTags);\r\n        navigate('/forum/filtertags', { state: { selectedTags: updatedTags } });\r\n    };\r\n\r\n\r\n    const originalDate = user?.createdAt || '';\r\n    const formattedDate = new Date(originalDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long' });\r\n\r\n    return (\r\n        <>\r\n            {loginModalOpen && <LoginModal onClick={toggleLoginModal} />}\r\n            {filterTagModalOpen && <FilterTagModal onClick={toggleTagModal} tagsData={tags} />}\r\n            <div className={`forum-category-page-filter-nav ${className}`}>\r\n                {!authUser ? (\r\n                    <>\r\n                        <div className='forum-category-page-row1 not-authenticated'>\r\n                            <p>Join our community, elevate your marketplace experience!</p>\r\n                            <button type='button' className='forum-login-btn' onClick={toggleLoginModal}>Sign In</button>\r\n                            <p>Don’t have a Yogeek account? <Link to='/registerbyemail'>Sign up</Link></p>\r\n                        </div>\r\n                        {userId && <div className='forum-category-page-row1'>\r\n                            <div className='forum-category-page-row1-row1'>\r\n                                <img src={user.profile_pic || DefaultAvatar} alt=\"\" className='forum-profile-pic' />\r\n                                <div className='user-display-name'>\r\n                                    <p>{user.display_name}</p>\r\n                                    <small>Joined in {formattedDate}</small>\r\n                                </div>\r\n                            </div>\r\n                            <ul className='forum-profile-menu'>\r\n                                <li onClick={handleCreatedDiscussions}>Created Discussions <span className='forum-activity-counter'>({totalCreatedDiscussions})</span></li>\r\n                                <li onClick={handleJoinedDiscussions}>Joined Discussions <span className='forum-activity-counter'>({totalJoinedDiscussions})</span></li>\r\n                                <li onClick={handleUserActivity}>Latest Activity</li>\r\n                                {authUserIdNumber === userIdNumber ? (\r\n                                    <li onClick={handleForumNotifications} className='forum-notifications'>Notifications {totalUnreadNotifications.totalCount > 0 && <div className='forum-notification-counter'>{totalUnreadNotifications.totalCount}</div>}</li>\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n\r\n                            </ul>\r\n                        </div>\r\n                        }\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {userId && (\r\n                            <div className='forum-category-page-row1'>\r\n                                <div className='forum-category-page-row1-row1'>\r\n                                    <img src={user.profile_pic || DefaultAvatar} alt=\"\" className='forum-profile-pic' />\r\n                                    <div className='user-display-name'>\r\n                                        <p>{user.display_name}</p>\r\n                                        <small>Joined in {formattedDate}</small>\r\n                                    </div>\r\n                                </div>\r\n                                <ul className='forum-profile-menu'>\r\n                                    <li onClick={handleCreatedDiscussions}>Created Discussions <span className='forum-activity-counter'>({totalCreatedDiscussions})</span></li>\r\n                                    <li onClick={handleJoinedDiscussions}>Joined Discussions <span className='forum-activity-counter'>({totalJoinedDiscussions})</span></li>\r\n                                    <li onClick={handleUserActivity}>Latest Activity</li>\r\n                                    {authUserIdNumber === userIdNumber ? (\r\n                                        <li onClick={handleForumNotifications} className='forum-notifications'>Notifications {totalUnreadNotifications.totalCount > 0 && <div className='forum-notification-counter'>{totalUnreadNotifications.totalCount}</div>}</li>\r\n                                    ) : (\r\n                                        null\r\n                                    )}\r\n\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n                {showFilter && (\r\n                    <>\r\n                        <div className='forum-sortby'>\r\n                            <label>SORT BY</label>\r\n                            <CustomSelect\r\n                                data={sortOptions}\r\n                                onOptionSelect={onOptionSelect}\r\n                                className='forum-sortby-dropdown-select'\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <div className='forum-category-page-row2'>\r\n                    <div className='section-label-container'>\r\n                        <label>CATEGORIES</label>\r\n                    </div>\r\n                    <div className=\"forum-category-btn-container\">\r\n                        {loadingCategories &&\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '3px' }}>\r\n                                <SideNavCategoriesSkeleton menus={8} />\r\n                            </div>\r\n                        }\r\n                        {categories?.categories?.map(category => (\r\n                            <NavLink activeclassname=\"active\" key={category.id} className='forum-category-menu' to={`/forum/category/${category.id}/${category.name}`} onClick={handleSelectedCategory}>{category.name}</NavLink>\r\n                        ))}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className='forum-category-page-row3'>\r\n                    <div className='section-label-container'>\r\n                        <label>POPULAR TAGS</label>\r\n                    </div>\r\n                    <div className=\"forum-category-btn-container\">\r\n                        {loadingTags &&\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '3px' }}>\r\n                                <SideNavCategoriesSkeleton menus={8} />\r\n                            </div>\r\n                        }\r\n                        {tags.slice(0, 10).map(tag => (\r\n                            <BtnCategory\r\n                                key={tag.id}\r\n                                onClick={() => toggleTag(tag.id)}\r\n                                label={tag.name}\r\n                                className={`tag-btn ${selectedTags.includes(tag.id) ? 'active' : ''}`}\r\n                            />\r\n                        ))}\r\n                        <div className='more-tags' style={{ justifyContent: selectedTags.length > 0 ? ('space-between') : ('end') }}>\r\n                            {selectedTags && selectedTags.length > 0 && <button onClick={clearAllTags}>Clear all</button>}\r\n                            <button onClick={toggleTagModal}>Select more tags</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default FilterNavigation;","import { setTags, setError } from '../reducer/forumTagsSlice';\r\nimport axios from '../../apicalls/axios';\r\n\r\n\r\n// Get Forum Tags\r\nexport const getAllForumTags = () => async (dispatch) => {\r\n  try {\r\n    const response = await axios.get('/api/fetchforumtags');\r\n    if (response.status === 200) {\r\n      const forumTagsData = response.data;\r\n      dispatch(setTags(forumTagsData));\r\n    } \r\n  } catch (error) {\r\n    console.error('Error fetching forum tags:', error);\r\n\r\n    // Handle the error and update the error state in the Redux store\r\n    dispatch(setError('Error fetching forum tags.'));\r\n  }\r\n};\r\n"],"names":["_ref","label","onClick","className","active","_jsx","concat","children","data","combinedData","subcategories","map","subcategory","matchingDiscussions","allDiscussions","filter","discussion","forum_category_id","id","allPosts","forEach","post","replies","latestPost","posts","checkPost","_latestPost","Date","created_at","findLatestPost","totalPosts","reduce","count","length","totalReplies","countReplies","getTotalReplies","totalViews","_discussion$post$","views","discussions","console","log","getFormattedDate","dateString","date","isNaN","getTime","formatDistanceToNow","addSuffix","locale","enUS","_Fragment","item","_item$latestPost","_jsxs","GroupMsgIcon","Link","to","name","description","MsgIcon","EyeIcon","menus","Array","fill","_","i","Skeleton","height","width","_categories$categorie","createdDiscussionsTab","joinedDiscussionsTab","userActivityTab","forumNotificationsTab","addDiscussionsBtn","discussionFilter","createdDiscussionsData","joinedDiscussionsData","activitiesData","paramsUserData","notifications","sortOptions","onOptionSelect","emptySortDiscussions","dispatch","useDispatch","authUser","useSelector","state","user","categories","forumcategories","tags","forumtags","userId","tab","useParams","userIdNumber","Number","authUserIdNumber","navigate","useNavigate","location","useLocation","showFilter","setShowFilter","useState","activeCategory","setActiveCategory","selectedTags","setSelectedTags","isArray","filterTagModalOpen","setFilterTagModalOpen","setUser","totalCreatedDiscussions","setTotalCreatedDiscussions","totalJoinedDiscussions","setTotalJoinedDiscussions","totalUnreadNotifications","setTotalUnreadNotifications","loadingCategories","setLoadingCategories","loadingTags","setLoadingTags","loginModalOpen","setLoginModalOpen","useEffect","getForumCategories","getAllForumTags","async","response","axios","get","display_name","profile_pic","createdAt","error","fetchUserData","descendingCD","sort","a","b","err","fetchCreatedDiscussions","descendingJD","fetchJoinedDiscussions","sortedActivities","fetchForumActivities","getTotalUnreadNotifications","handleCreatedDiscussions","handleJoinedDiscussions","handleUserActivity","handleForumNotifications","handleSelectedCategory","toggleLoginModal","prevLoginModalOpen","toggleTagModal","prev","originalDate","formattedDate","toLocaleDateString","year","month","LoginModal","FilterTagModal","tagsData","src","DefaultAvatar","alt","totalCount","type","CustomSelect","style","display","flexWrap","gap","SideNavCategoriesSkeleton","category","NavLink","activeclassname","slice","tag","BtnCategory","toggleTag","tag_id","prevSelectedTags","updatedTags","includes","t","justifyContent","clearAllTags","status","forumTagsData","setTags","setError"],"sourceRoot":""}